//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `ElectionSystem.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ElectionSystem;

public class ElectionData implements java.lang.Cloneable,
                                     java.io.Serializable
{
    public String name;

    public String startDate;

    public String endDate;

    public CandidateData[] candidates;

    public ElectionData()
    {
        this.name = "";
        this.startDate = "";
        this.endDate = "";
    }

    public ElectionData(String name, String startDate, String endDate, CandidateData[] candidates)
    {
        this.name = name;
        this.startDate = startDate;
        this.endDate = endDate;
        this.candidates = candidates;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ElectionData r = null;
        if(rhs instanceof ElectionData)
        {
            r = (ElectionData)rhs;
        }

        if(r != null)
        {
            if(this.name != r.name)
            {
                if(this.name == null || r.name == null || !this.name.equals(r.name))
                {
                    return false;
                }
            }
            if(this.startDate != r.startDate)
            {
                if(this.startDate == null || r.startDate == null || !this.startDate.equals(r.startDate))
                {
                    return false;
                }
            }
            if(this.endDate != r.endDate)
            {
                if(this.endDate == null || r.endDate == null || !this.endDate.equals(r.endDate))
                {
                    return false;
                }
            }
            if(!java.util.Arrays.equals(this.candidates, r.candidates))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::ElectionSystem::ElectionData");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, name);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, startDate);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, endDate);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, candidates);
        return h_;
    }

    public ElectionData clone()
    {
        ElectionData c = null;
        try
        {
            c = (ElectionData)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.name);
        ostr.writeString(this.startDate);
        ostr.writeString(this.endDate);
        CandidateDataSeqHelper.write(ostr, this.candidates);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.name = istr.readString();
        this.startDate = istr.readString();
        this.endDate = istr.readString();
        this.candidates = CandidateDataSeqHelper.read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, ElectionData v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public ElectionData ice_read(com.zeroc.Ice.InputStream istr)
    {
        ElectionData v = new ElectionData();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<ElectionData> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, ElectionData v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<ElectionData> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(ElectionData.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final ElectionData _nullMarshalValue = new ElectionData();

    /** @hidden */
    public static final long serialVersionUID = -462173232L;
}
