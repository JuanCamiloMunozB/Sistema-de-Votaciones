//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `ElectionSystem.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ElectionSystem;

public class ElectionEvent implements java.lang.Cloneable,
                                      java.io.Serializable
{
    public EventType type;

    public String timestamp;

    public java.util.Map<java.lang.String, java.lang.String> details;

    public ElectionEvent()
    {
        this.type = EventType.ElectionStarted;
        this.timestamp = "";
    }

    public ElectionEvent(EventType type, String timestamp, java.util.Map<java.lang.String, java.lang.String> details)
    {
        this.type = type;
        this.timestamp = timestamp;
        this.details = details;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ElectionEvent r = null;
        if(rhs instanceof ElectionEvent)
        {
            r = (ElectionEvent)rhs;
        }

        if(r != null)
        {
            if(this.type != r.type)
            {
                if(this.type == null || r.type == null || !this.type.equals(r.type))
                {
                    return false;
                }
            }
            if(this.timestamp != r.timestamp)
            {
                if(this.timestamp == null || r.timestamp == null || !this.timestamp.equals(r.timestamp))
                {
                    return false;
                }
            }
            if(this.details != r.details)
            {
                if(this.details == null || r.details == null || !this.details.equals(r.details))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::ElectionSystem::ElectionEvent");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, type);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, timestamp);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, details);
        return h_;
    }

    public ElectionEvent clone()
    {
        ElectionEvent c = null;
        try
        {
            c = (ElectionEvent)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        EventType.ice_write(ostr, this.type);
        ostr.writeString(this.timestamp);
        EventPayloadHelper.write(ostr, this.details);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.type = EventType.ice_read(istr);
        this.timestamp = istr.readString();
        this.details = EventPayloadHelper.read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, ElectionEvent v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public ElectionEvent ice_read(com.zeroc.Ice.InputStream istr)
    {
        ElectionEvent v = new ElectionEvent();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<ElectionEvent> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, ElectionEvent v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<ElectionEvent> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(ElectionEvent.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final ElectionEvent _nullMarshalValue = new ElectionEvent();

    /** @hidden */
    public static final long serialVersionUID = 1435408945L;
}
