//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `ElectionSystem.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ElectionSystem;

public interface ControlCenterService extends com.zeroc.Ice.Object
{
    VotingTableData getVotingTableData(int tableId, com.zeroc.Ice.Current current);

    CandidateData[] getCandidates(com.zeroc.Ice.Current current);

    void startElection(com.zeroc.Ice.Current current);

    void endElection(com.zeroc.Ice.Current current);

    void submitVote(VoteData vote, com.zeroc.Ice.Current current)
        throws CandidateNotFound,
               CitizenAlreadyVoted,
               CitizenNotBelongToTable,
               CitizenNotFound,
               ElectionInactive;

    void subscribeElectionActivity(ElectionActivityObserverPrx observer, String votingTableIdentity, com.zeroc.Ice.Current current);

    void unsubscribeElectionActivity(String votingTableIdentity, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::ElectionSystem::ControlCenterService",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::ElectionSystem::ControlCenterService";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getVotingTableData(ControlCenterService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_tableId;
        iceP_tableId = istr.readInt();
        inS.endReadParams();
        VotingTableData ret = obj.getVotingTableData(iceP_tableId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        VotingTableData.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getCandidates(ControlCenterService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        CandidateData[] ret = obj.getCandidates(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CandidateDataSeqHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_startElection(ControlCenterService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.startElection(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_endElection(ControlCenterService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.endElection(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_submitVote(ControlCenterService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        VoteData iceP_vote;
        iceP_vote = VoteData.ice_read(istr);
        inS.endReadParams();
        obj.submitVote(iceP_vote, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_subscribeElectionActivity(ControlCenterService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        ElectionActivityObserverPrx iceP_observer;
        String iceP_votingTableIdentity;
        iceP_observer = ElectionActivityObserverPrx.uncheckedCast(istr.readProxy());
        iceP_votingTableIdentity = istr.readString();
        inS.endReadParams();
        obj.subscribeElectionActivity(iceP_observer, iceP_votingTableIdentity, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unsubscribeElectionActivity(ControlCenterService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_votingTableIdentity;
        iceP_votingTableIdentity = istr.readString();
        inS.endReadParams();
        obj.unsubscribeElectionActivity(iceP_votingTableIdentity, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "endElection",
        "getCandidates",
        "getVotingTableData",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "startElection",
        "submitVote",
        "subscribeElectionActivity",
        "unsubscribeElectionActivity"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_endElection(this, in, current);
            }
            case 1:
            {
                return _iceD_getCandidates(this, in, current);
            }
            case 2:
            {
                return _iceD_getVotingTableData(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 7:
            {
                return _iceD_startElection(this, in, current);
            }
            case 8:
            {
                return _iceD_submitVote(this, in, current);
            }
            case 9:
            {
                return _iceD_subscribeElectionActivity(this, in, current);
            }
            case 10:
            {
                return _iceD_unsubscribeElectionActivity(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
