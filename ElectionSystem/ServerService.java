//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `ElectionSystem.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ElectionSystem;

public interface ServerService extends com.zeroc.Ice.Object
{
    ElectionData getElectionData(int controlCenterId, com.zeroc.Ice.Current current);

    VotingTableData[] getVotingTablesFromStation(int controlCenterId, com.zeroc.Ice.Current current);

    void registerVote(VoteData vote, com.zeroc.Ice.Current current)
        throws CandidateNotFound,
               CitizenAlreadyVoted,
               CitizenNotBelongToTable,
               CitizenNotFound;

    void subscribe(EventObserverPrx observer, String observerIdentity, com.zeroc.Ice.Current current);

    void unsubscribe(String observerIdentity, com.zeroc.Ice.Current current);

    CandidateData[] getCandidates(com.zeroc.Ice.Current current);

    String findVotingStationByDocument(String document, com.zeroc.Ice.Current current);

    CandidateResult[] getGlobalResults(com.zeroc.Ice.Current current);

    java.util.Map<java.lang.Integer, CandidateResult[]> getResultsByVotingTable(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::ElectionSystem::ServerService",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::ElectionSystem::ServerService";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getElectionData(ServerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_controlCenterId;
        iceP_controlCenterId = istr.readInt();
        inS.endReadParams();
        ElectionData ret = obj.getElectionData(iceP_controlCenterId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ElectionData.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getVotingTablesFromStation(ServerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_controlCenterId;
        iceP_controlCenterId = istr.readInt();
        inS.endReadParams();
        VotingTableData[] ret = obj.getVotingTablesFromStation(iceP_controlCenterId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        VotingTableDataSeqHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_registerVote(ServerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        VoteData iceP_vote;
        iceP_vote = VoteData.ice_read(istr);
        inS.endReadParams();
        obj.registerVote(iceP_vote, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_subscribe(ServerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        EventObserverPrx iceP_observer;
        String iceP_observerIdentity;
        iceP_observer = EventObserverPrx.uncheckedCast(istr.readProxy());
        iceP_observerIdentity = istr.readString();
        inS.endReadParams();
        obj.subscribe(iceP_observer, iceP_observerIdentity, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unsubscribe(ServerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_observerIdentity;
        iceP_observerIdentity = istr.readString();
        inS.endReadParams();
        obj.unsubscribe(iceP_observerIdentity, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getCandidates(ServerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        CandidateData[] ret = obj.getCandidates(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CandidateDataSeqHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_findVotingStationByDocument(ServerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_document;
        iceP_document = istr.readString();
        inS.endReadParams();
        String ret = obj.findVotingStationByDocument(iceP_document, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getGlobalResults(ServerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        CandidateResult[] ret = obj.getGlobalResults(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CandidateResultSeqHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getResultsByVotingTable(ServerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        java.util.Map<java.lang.Integer, CandidateResult[]> ret = obj.getResultsByVotingTable(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        TableResultsMapHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "findVotingStationByDocument",
        "getCandidates",
        "getElectionData",
        "getGlobalResults",
        "getResultsByVotingTable",
        "getVotingTablesFromStation",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "registerVote",
        "subscribe",
        "unsubscribe"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_findVotingStationByDocument(this, in, current);
            }
            case 1:
            {
                return _iceD_getCandidates(this, in, current);
            }
            case 2:
            {
                return _iceD_getElectionData(this, in, current);
            }
            case 3:
            {
                return _iceD_getGlobalResults(this, in, current);
            }
            case 4:
            {
                return _iceD_getResultsByVotingTable(this, in, current);
            }
            case 5:
            {
                return _iceD_getVotingTablesFromStation(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 8:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 9:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 10:
            {
                return _iceD_registerVote(this, in, current);
            }
            case 11:
            {
                return _iceD_subscribe(this, in, current);
            }
            case 12:
            {
                return _iceD_unsubscribe(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
